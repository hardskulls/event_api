# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose

services:
  server:
    container_name: server
    build:
      context: .
      target: final
      args:
        - MIGRATIONS_FOLDER
    ports:
      - "${PORT}:${PORT}"
    depends_on:
      clickhouse:
        condition: service_healthy
    environment:
      - PORT
      - CLICKHOUSE_USER, CLICKHOUSE_PASSWORD, CLICKHOUSE_DB, CLICKHOUSE_PORT
      - CLICKHOUSE_URL=clickhouse://${CLICKHOUSE_USER}:${CLICKHOUSE_PASSWORD}@clickhouse:${CLICKHOUSE_PORT}/${CLICKHOUSE_DB}?debug=true
      - MIGRATIONS_FOLDER
      - PATH_TO_MIGRATIONS
  clickhouse:
    container_name: clickhouse
    image: clickhouse/clickhouse-server
    restart: always
    ports:
      - "8123:8123"
      - "9000:9000"
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    volumes:
      - db-data:/var/lib/clickhouse/
      - db-data:/var/log/clickhouse-server/
      - db-data:/etc/clickhouse-server/ # - files with server configuration adjustmenets
#      - ./data/db/clickhouse/docker_init/:/docker-entrypoint-initdb/
#      - ./db/clickhouse/server:/etc/clickhouse-server
    healthcheck:
      test: [
        "CMD-SHELL",
        # Manually override any http_proxy envvar that might be set, because
        # this wget does not support no_proxy. See:
        # https://github.com/getsentry/self-hosted/issues/1537
        "http_proxy='' wget -nv -t1 --spider 'http://localhost:8123/' || exit 1",
      ]
      interval: 10s
      timeout: 10s
      retries: 30
volumes:
  db-data:
    external: false

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

